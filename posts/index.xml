<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 有度规约</title>
    <link>https://yuyou80.github.io/posts/</link>
    <description>Recent content in Posts on 有度规约</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://yuyou80.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a New Theme</title>
      <link>https://yuyou80.github.io/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yuyou80.github.io/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://yuyou80.github.io/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yuyou80.github.io/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://yuyou80.github.io/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yuyou80.github.io/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://yuyou80.github.io/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yuyou80.github.io/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/▾ images/logo.png should become
▾ &amp;lt;root&amp;gt;/▾ static/▾ images/logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>mysql索引</title>
      <link>https://yuyou80.github.io/posts/mysql%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yuyou80.github.io/posts/mysql%E7%B4%A2%E5%BC%95/</guid>
      <description>MYSQL索引 这是最近一位老朋友去百度面试，应该是面试资深工程师岗位，他跟我讲被问到mysql索引知识点？其实面试官主要还是考察对mysql的性能调优相关，问理论知识其实也是想知道你对原理的认知，从而确认你是否有相关的调优经验。朋友说他回答得还行，然后很顺利的进行了三面四面。那么本文将跟大家一起来聊一聊这个如何回答面试官的这个问题！
聊聊索引分类 按数据结构分类可分为：B+TREE(树)索引、HASH索引、FULLTEXT索引；按索引种类可以分为：普通索引、主键索引、唯一索引、全文索引、组合索引、一级索引、二级索引。
这两个有什么区别嘛？肯定有：一个是索引实现类型；一个是创建索引用到的类型
 普通索引：(INDEX)建立在普通字段上的索引被称为普通索引  ALTER TABLE `table_name` ADD INDEX idx_name ( `user_name` )  主键索引：(PRIMARY KEY)建立在主键上的索引被称为主键索引，一张数据表只能有一个主键索引，索引列值不允许有空值  ALTER TABLE `table_name` ADD PRIMARY KEY ( `user_id` )  唯一索引：(UNIQUE)建立在 unique 字段上的索引被称为唯一索引，一张表可以有多个唯一索引，索引列值允许为空，列值中出现多个空值不会发生重复冲突  ALTER TABLE `table_name` ADD UNIQUE (`user_name`) 全文索引：(FULLTEXT)建立在 varchar、char、text列上的全文索引；配合 match against 使用，类似一个搜索引擎，数据大时，很占用空间且耗时  ALTER TABLE `table_name` ADD FULLTEXT ( `user_desc` ) 组合索引：建立在多列上的索引叫组合索引，遵循”最左前缀“原则  ALTER TABLE `table_name` ADD INDEX idx_name_age ( `user_name`, `user_age` ) 一级索引：索引和数据存储在一起，都存储在同一个B+tree中的叶子节点。一般主键索引都是一级索引 二级索引：二级索引树的叶子节点存储的是主键而不是数据。也就是说，在找到索引后，得到对应的主键，再回到一级索引中找主键对应的数据记录  注意点：切不可滥用索引；切不可建立太多的索引；切不可建立重复索引</description>
    </item>
    
    <item>
      <title>Test 9</title>
      <link>https://yuyou80.github.io/posts/test-9/</link>
      <pubDate>Thu, 09 Jan 1012 00:00:00 +0000</pubDate>
      
      <guid>https://yuyou80.github.io/posts/test-9/</guid>
      <description>Test 9</description>
    </item>
    
    <item>
      <title>Test 8</title>
      <link>https://yuyou80.github.io/posts/test-8/</link>
      <pubDate>Wed, 08 Jan 1012 00:00:00 +0000</pubDate>
      
      <guid>https://yuyou80.github.io/posts/test-8/</guid>
      <description>Test 8</description>
    </item>
    
    <item>
      <title>Test 7</title>
      <link>https://yuyou80.github.io/posts/test-7/</link>
      <pubDate>Tue, 07 Jan 1012 00:00:00 +0000</pubDate>
      
      <guid>https://yuyou80.github.io/posts/test-7/</guid>
      <description>Test 7</description>
    </item>
    
    <item>
      <title>Test 6</title>
      <link>https://yuyou80.github.io/posts/test-6/</link>
      <pubDate>Mon, 06 Jan 1012 00:00:00 +0000</pubDate>
      
      <guid>https://yuyou80.github.io/posts/test-6/</guid>
      <description>Test 6</description>
    </item>
    
    <item>
      <title>Test 5</title>
      <link>https://yuyou80.github.io/posts/test-5/</link>
      <pubDate>Sun, 05 Jan 1012 00:00:00 +0000</pubDate>
      
      <guid>https://yuyou80.github.io/posts/test-5/</guid>
      <description>Test 5</description>
    </item>
    
    <item>
      <title>Test 4</title>
      <link>https://yuyou80.github.io/posts/test-4/</link>
      <pubDate>Sat, 04 Jan 1012 00:00:00 +0000</pubDate>
      
      <guid>https://yuyou80.github.io/posts/test-4/</guid>
      <description>Test 4</description>
    </item>
    
    <item>
      <title>Test 3</title>
      <link>https://yuyou80.github.io/posts/test-3/</link>
      <pubDate>Fri, 03 Jan 1012 00:00:00 +0000</pubDate>
      
      <guid>https://yuyou80.github.io/posts/test-3/</guid>
      <description>Test 3</description>
    </item>
    
    <item>
      <title>Test 2</title>
      <link>https://yuyou80.github.io/posts/test-2/</link>
      <pubDate>Thu, 02 Jan 1012 00:00:00 +0000</pubDate>
      
      <guid>https://yuyou80.github.io/posts/test-2/</guid>
      <description>Test 2</description>
    </item>
    
    <item>
      <title>Test 1</title>
      <link>https://yuyou80.github.io/posts/test-1/</link>
      <pubDate>Wed, 01 Jan 1012 00:00:00 +0000</pubDate>
      
      <guid>https://yuyou80.github.io/posts/test-1/</guid>
      <description>Test 1 I am referencing a footnote1
1package main 2 3import &amp;#34;fmt&amp;#34; 4 5func main() { 6 fmt.Println(&amp;#34;{linenos=inline}&amp;#34;) 7} 1 2 3 4 5 6 7  package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;{linenos=table}&amp;#34;) }   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis in dictum tortor.Morbi laoreet enim id sem euismod lobortis. Donec quam libero, bibendum non cursus vitae, dictum vel eros.  I am the footnote&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>新榜mysql规约</title>
      <link>https://yuyou80.github.io/posts/%E6%96%B0%E6%A6%9Cmysql%E8%A7%84%E7%BA%A6-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuyou80.github.io/posts/%E6%96%B0%E6%A6%9Cmysql%E8%A7%84%E7%BA%A6-/</guid>
      <description>新榜mysql规约** 概要 想要发挥 MySQL 的最佳性能，需要遵循 3 个基本使用原则：
 首先是需要让 MySQL 回归存储的基本职能：MySQL 数据库只用于数据的存储，不进行数据的复杂计算，不承载业务逻辑，确保存储和计算分离； 其次是查询数据时，尽量单表查询，减少跨库查询和多表关联； 还有就是要杜绝大事务、大 SQL、大批量、大字段等一系列性能杀手。 • 大事务，运行步骤较多，涉及的表和字段较多，容易造成资源的争抢，甚至形成死锁。一旦事务回滚，会导致资源占用时间过长。 • 大 SQL，复杂的 SQL 意味着过多的表的关联，MySQL 数据库处理关联超过 3 张表以上的 SQL 时，占用资源多，性能低下。 • 大批量，意味着多条 SQL 一次性执行完成，必须确保进行充分的测试，并且在业务低峰时段或者非业务时段执行。 • 大字段，blob、text 等大字段，尽量少用。必须要用时，尽量与主业务表分离，减少对这类字段的检索和更新。  强制遵循规约 建库规约  【强制】数据库库名的命名规则必须遵循“见名知意”的原则,命名时的字符取值范围为：a~z，0~9 和 _（下画线，即库名规则为“数据库类型代码 + (项目简称)+ 识别代码 + 序号”。当库已项目拆分的时候增加项目简称，ad_zmb(广告系统自媒体宝业务正式库)  正例：这样包含了更多的业务信息，比如：
   广告系统业务生产库：ad、ad1、ad2； 广告系统业务开发库：ad_dev、ad_dev1、ad_dev2； 广告系统业务测试库：ad_test、ad_test1、ad_test2； 只有一个数据库，则不加序号，否则末尾增加序号； 生产库不加识别代码，否则需要增加识别代码 dev或 test； 如果只作历史库，则只需要项目简称 +h+ 序号: ad_h；    建表规约  【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（1 表示是，0 表示否）。  说明：任何字段如果为非负数，必须是 unsigned。</description>
    </item>
    
  </channel>
</rss>
